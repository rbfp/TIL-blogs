#!/bin/bash

# Ensure the script runs as root
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   exit 1
fi

# Detect OS and Architecture
OS_TYPE=$(uname -s)
ARCH=$(dpkg --print-architecture)

echo "[*] Detected OS: $OS_TYPE"
echo "[*] Detected Architecture: $ARCH"

# Install necessary dependencies
echo "[*] Installing dependencies..."
apt update && apt install -y wget curl unzip build-essential libpcre3 libpcre3-dev

# Fix OpenSSL for Ubuntu 24.04
if grep -q "24.04" /etc/os-release; then
    echo "[*] Ubuntu 24.04 detected. Installing OpenSSL 1.1.1 for compatibility..."
    
    ARCH=$(dpkg --print-architecture)
    
    if [[ "$ARCH" == "amd64" ]]; then
        wget http://old-releases.ubuntu.com/ubuntu/pool/main/o/openssl1.1/libssl1.1_1.1.1f-1ubuntu2.19_amd64.deb
        sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2.19_amd64.deb
    elif [[ "$ARCH" == "arm64" ]]; then
        wget http://old-releases.ubuntu.com/ubuntu/pool/main/o/openssl1.1/libssl1.1_1.1.1f-1ubuntu2.19_arm64.deb
        sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2.19_arm64.deb
    else
        echo "[!] Unsupported architecture: $ARCH"
        exit 1
    fi
fi

# Download Apache 2.4.49
echo "[*] Downloading Apache 2.4.49 (vulnerable version)..."
wget https://archive.apache.org/dist/httpd/httpd-2.4.49.tar.gz
tar -xzf httpd-2.4.49.tar.gz
cd httpd-2.4.49

# Configure and Compile for Architecture
echo "[*] Configuring Apache for $ARCH..."
if [[ "$ARCH" == "arm64" ]]; then
    ./configure --prefix=/usr/local/apache2 --enable-so --host=aarch64-linux-gnu
else
    ./configure --prefix=/usr/local/apache2 --enable-so
fi

echo "[*] Compiling Apache..."
make -j$(nproc) && make install

# Replace default Apache binary
echo "[*] Replacing default Apache binary..."
mv /usr/sbin/apache2 /usr/sbin/apache2.bak
ln -s /usr/local/apache2/bin/httpd /usr/sbin/apache2

# Create Apache Config
echo "[*] Configuring Apache..."
cat <<EOF > /usr/local/apache2/conf/httpd.conf
ServerRoot "/usr/local/apache2"
Listen 80
LoadModule mpm_event_module modules/mod_mpm_event.so
LoadModule unixd_module modules/mod_unixd.so
LoadModule dir_module modules/mod_dir.so
LoadModule alias_module modules/mod_alias.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule mime_module modules/mod_mime.so
LoadModule setenvif_module modules/mod_setenvif.so
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule authz_host_module modules/mod_authz_host.so
LoadModule headers_module modules/mod_headers.so

User www-data
Group www-data

DocumentRoot "/usr/local/apache2/htdocs"
<Directory />
    Require all granted
</Directory>

<Directory "/usr/local/apache2/htdocs">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
</Directory>

ErrorLog "/usr/local/apache2/logs/error_log"
CustomLog "/usr/local/apache2/logs/access_log" common
EOF

# Create test web page
echo "[*] Creating a test web page..."
echo "<h1>Vulnerable Apache Server (CVE-2021-41773)</h1>" > /usr/local/apache2/htdocs/index.html

# Start Apache differently based on OS
echo "[*] Starting vulnerable Apache service..."
if [[ "$OS_TYPE" == "Linux" ]]; then
    if [[ "$ARCH" == "arm64" ]]; then
        echo "[*] ARM detected - manually starting Apache..."
        /usr/local/apache2/bin/httpd -k start
    else
        echo "[*] Using systemctl for Apache on x86_64..."
        systemctl daemon-reload
        systemctl restart apache2
    fi
elif [[ "$OS_TYPE" == "Darwin" ]]; then
    echo "[*] macOS detected - starting Apache manually..."
    /usr/local/apache2/bin/httpd -k start
elif [[ "$OS_TYPE" == "MINGW64_NT"* || "$OS_TYPE" == "MSYS_NT"* ]]; then
    echo "[*] Windows WSL detected - starting Apache manually..."
    /usr/local/apache2/bin/httpd -k start
fi

echo "[*] Setup complete. The server is now running and vulnerable to CVE-2021-41773."

